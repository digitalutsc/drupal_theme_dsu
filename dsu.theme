
<?php
use Drupal\Core\Template\Attribute;
use Drupal\Core\Url;
use Drupal\Component\Utility\Html;
use Drupal\Core\Link;

global $base_url;
$theme_root = $base_url.'/'.drupal_get_path('theme','dsu');

function dsu_preprocess_menu(&$variables) {

}
function dsu_preprocess_views_view_unformatted(&$variables) {
    $query = \Drupal::entityQuery('taxonomy_term');
    $query->condition('vid', "position")
            ->sort('weight', 'ASC')
            ->sort('name', 'ASC');
    $tids = $query->execute();
    $terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadMultiple($tids);
    $variables['staff_positions'] = $terms;

    if (\Drupal::currentUser()->isAuthenticated()) {
        // This user is logged in.
        $variables['is_user_login'] = true;
    }
}

/**
* Temporary fixes for msising path of pager
* Check it again when Irfan update Drupal core.
*
**/

function dsu_preprocess_pager(&$variables) {
  $element = $variables['pager']['#element'];
    $parameters = $variables['pager']['#parameters'];
    $quantity = empty($variables['pager']['#quantity']) ? 0 : $variables['pager']['#quantity'];


    $route_name = $variables['pager']['#route_name'];

    if ($variables['pager']['#route_name'] != "<none>") {
      $route_parameters = isset($variables['pager']['#route_parameters']) ? $variables['pager']['#route_parameters'] : [];
    }
    else {
      $current_path = \Drupal::service('path.current')->getPath();
        $url_object = \Drupal::service('path.validator')->getUrlIfValid($current_path);
        $route_name = $url_object->getRouteName();
        $route_parameters = $url_object->getrouteParameters();
    }
    /* @var $pager_manager \Drupal\Core\Pager\PagerManagerInterface */
    $pager_manager = \Drupal::service('pager.manager');
    $pager = $pager_manager
      ->getPager($element);

    // Nothing to do if there is no pager.
    if (!isset($pager)) {
      return;
    }
    $pager_max = $pager
      ->getTotalPages();

    // Nothing to do if there is only one page.
    if ($pager_max <= 1) {
      return;
    }
    $tags = $variables['pager']['#tags'];

    // Calculate various markers within this pager piece:
    // Middle is used to "center" pages around the current page.
    $pager_middle = ceil($quantity / 2);
    $current_page = $pager
      ->getCurrentPage();

    // The current pager is the page we are currently paged to.
    $pager_current = $current_page + 1;

    // The first pager is the first page listed by this pager piece (re quantity).
    $pager_first = $pager_current - $pager_middle + 1;

    // The last is the last page listed by this pager piece (re quantity).
    $pager_last = $pager_current + $quantity - $pager_middle;

    // End of marker calculations.
    // Prepare for generation loop.
    $i = $pager_first;
    if ($pager_last > $pager_max) {

      // Adjust "center" if at end of query.
      $i = $i + ($pager_max - $pager_last);
      $pager_last = $pager_max;
    }
    if ($i <= 0) {

      // Adjust "center" if at start of query.
      $pager_last = $pager_last + (1 - $i);
      $i = 1;
    }

    // End of generation loop preparation.
    // Create the "first" and "previous" links if we are not on the first page.
    if ($current_page > 0) {
      $items['first'] = [];
      $items['first']['attributes'] = new Attribute();
      $options = [
        'query' => $pager_manager
          ->getUpdatedParameters($parameters, $element, 0),
      ];
      $items['first']['href'] = Url::fromRoute($route_name, $route_parameters, $options)
        ->toString();
      if (isset($tags[0])) {
        $items['first']['text'] = $tags[0];
      }
      $items['previous'] = [];
      $items['previous']['attributes'] = new Attribute();
      $options = [
        'query' => $pager_manager
          ->getUpdatedParameters($parameters, $element, $current_page - 1),
      ];
      $items['previous']['href'] = Url::fromRoute($route_name, $route_parameters, $options)
        ->toString();
      if (isset($tags[1])) {
        $items['previous']['text'] = $tags[1];
      }
    }
    if ($i != $pager_max) {

      // Add an ellipsis if there are further previous pages.
      if ($i > 1) {
        $variables['ellipses']['previous'] = TRUE;
      }

      // Now generate the actual pager piece.
      for (; $i <= $pager_last && $i <= $pager_max; $i++) {
        $options = [
          'query' => $pager_manager
            ->getUpdatedParameters($parameters, $element, $i - 1),
        ];
        $items['pages'][$i]['href'] = Url::fromRoute($route_name, $route_parameters, $options)
          ->toString();
        $items['pages'][$i]['attributes'] = new Attribute();
        if ($i == $pager_current) {
          $variables['current'] = $i;
        }
      }

      // Add an ellipsis if there are further next pages.
      if ($i < $pager_max + 1) {
        $variables['ellipses']['next'] = TRUE;
      }
    }

    // Create the "next" and "last" links if we are not on the last page.
    if ($current_page < $pager_max - 1) {
      $items['next'] = [];
      $items['next']['attributes'] = new Attribute();
      $options = [
        'query' => $pager_manager
          ->getUpdatedParameters($parameters, $element, $current_page + 1),
      ];
      $items['next']['href'] = Url::fromRoute($route_name, $route_parameters, $options)
        ->toString();
      if (isset($tags[3])) {
        $items['next']['text'] = $tags[3];
      }
      $items['last'] = [];
      $items['last']['attributes'] = new Attribute();
      $options = [
        'query' => $pager_manager
          ->getUpdatedParameters($parameters, $element, $pager_max - 1),
      ];
      $items['last']['href'] = Url::fromRoute($route_name, $route_parameters, $options)
        ->toString();
      if (isset($tags[4])) {
        $items['last']['text'] = $tags[4];
      }
    }
    $variables['items'] = $items;
    $variables['heading_id'] = Html::getUniqueId('pagination-heading');

    // The rendered link needs to play well with any other query parameter used
    // on the page, like exposed filters, so for the cacheability all query
    // parameters matter.
    $variables['#cache']['contexts'][] = 'url.query_args';

}
